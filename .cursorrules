FIRST RULE THAT MUST BE READ AND FOLLOWED ALWAYS.
In every rules here, there are some rules that must be followed in each project type of development, These rules are important for the project to be successful. so look at them carefully because these rules has a different rules for each project type of development.

# .cursorrules

# Main General rules

- Do not apologize
- Do not thank me
- Talk to me like a human
- Verify information before making changes
- Preserve existing code structures
- Provide concise and relevant responses
- Verify all information before making changes
  You will be penalized if you:
- Skip steps in your thought process
- Add placeholders or TODOs for other developers
- Deliver code that is not production-ready

I'm tipping $9000 for an optimal, elegant, minimal world-class solution that meets all specifications. Your code changes
should be specific and complete. Think through the problem step-by-step.

YOU MUST:

- Follow the User's intent PRECISELY
- NEVER break existing functionality by removing/modifying code or CSS without knowing exactly how to restore the same
  function
- Always strive to make your diff as tiny as possible

# File-by-file changes

- Make changes in small, incremental steps
- Test changes thoroughly before committing
- Document changes clearly in commit messages

# Code style and formatting

- Follow the project's coding standards
- Use consistent naming conventions
- Avoid using deprecated functions or libraries

# Debugging and testing

- Include debug information in log files
- Write unit tests for new code
- Ensure all tests pass before merging

# Project structure

- Maintain a clear and organized project structure
- Use meaningful names for files and directories
- Avoid clutter by removing unnecessary files

# CleanCode

Don't Repeat Yourself (DRY)
Duplication of code can make code very difficult to maintain. Any change in logic can make the code prone to bugs or can
make the code change difficult. This can be fixed by doing code reuse (DRY Principle).

The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation
within a system".

The way to achieve DRY is by creating functions and classes to make sure that any logic should be written in only one
place.

Curly's Law - Do One Thing
Curly's Law is about choosing a single, clearly defined goal for any particular bit of code: Do One Thing.

Curly's Law: A entity (class, function, variable) should mean one thing, and one thing only. It should not mean one
thing in one circumstance and carry a different value from a different domain some other time. It should not mean two
things at once. It should mean One Thing and should mean it all of the time.

Keep It Simple Stupid (KISS)
The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore,
simplicity should be a key goal in design, and unnecessary complexity should be avoided.

Simple code has the following benefits:

less time to write
less chances of bugs
easier to understand, debug and modify
Do the simplest thing that could possibly work.

Don't make me think
Code should be easy to read and understand without much thinking. If it isn't then there is a prospect of
simplification.

You Aren't Gonna Need It (YAGNI)
You Aren't Gonna Need It (YAGNI) is an Extreme Programming (XP) practice which states: "Always implement things when you
actually need them, never when you just foresee that you need them."

Even if you're totally, totally, totally sure that you'll need a feature, later on, don't implement it now. Usually,
it'll turn out either:

you don't need it after all, or
what you actually need is quite different from what you foresaw needing earlier.
This doesn't mean you should avoid building flexibility into your code. It means you shouldn't overengineer something
based on what you think you might need later on.

There are two main reasons to practice YAGNI:

You save time because you avoid writing code that you turn out not to need.
Your code is better because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick
around anyway.
Premature Optimization is the Root of All Evil
Programmers waste enormous amounts of time thinking about or worrying about, the speed of noncritical parts of their
programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are
considered.

We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.
Yet we should not pass up our opportunities in that critical 3%.

- Donald Knuth

Boy-Scout Rule
Any time someone sees some code that isn't as clear as it should be, they should take the opportunity to fix it right
there and then - or at least within a few minutes.

This opportunistic refactoring is referred to by Uncle Bob as following the boy-scout rule - always leave the code
behind in a better state than you found it.

The code quality tends to degrade with each change. This results in technical debt. The Boy-Scout Principle saves us
from that.

Code for the Maintainer
Code maintenance is an expensive and difficult process. Always code considering someone else as the maintainer and
making changes accordingly even if you're the maintainer. After a while, you'll remember the code as much as a stranger.

Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.

Principle of Least Astonishment
Principle of Least Astonishment states that a component of a system should behave in a way that most users will expect
it to behave. The behavior should not astonish or surprise users.

Code should do what the name and comments suggest. Conventions should be followed. Surprising side effects should be
avoided as much as possible.

# Project specific rules

I'm using angular with standalone compnents

I'm integrating novo elements which is the novo-elements module
Documentation is here: https://bullhorn.github.io/novo-elements/docs/#/home
Github is here: https://github.com/bullhorn/novo-elements

I don''t have a module file. I am using standalone components

@Docs
{
"library_name": "Novo Elements",
"documentation": "https://bullhorn.github.io/novo-elements/docs/#/home"
}

@Docs
{
"library_name": "Novo Elements",
"documentation": "https://github.com/bullhorn/novo-elements"
}

---

1. **Verify Information**: Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.2. **File-by-File Changes**: Make changes file by file and give me a chance to spot mistakes.3. **No Apologies**: Never use apologies.4. **No Understanding Feedback**: Avoid giving feedback about understanding in comments or documentation.5. **No Whitespace Suggestions**: Don't suggest whitespace changes.6. **No Summaries**: Don't summarize changes made.7. **No Inventions**: Don't invent changes other than what's explicitly requested.8. **No Unnecessary Confirmations**: Don't ask for confirmation of information already provided in the context.9. **Preserve Existing Code**: Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.10. **Single Chunk Edits**: Provide all edits in a single chunk instead of multiple-step instructions or explanations for the same file.11. **No Implementation Checks**: Don't ask the user to verify implementations that are visible in the provided context.12. **No Unnecessary Updates**: Don't suggest updates or changes to files when there are no actual modifications needed.13. **Provide Real File Links**: Always provide links to the real files, not the context generated file.14. **No Current Implementation**: Don't show or discuss the current implementation unless specifically requested.15. **Check Context Generated File Content**: Remember to check the context generated file for the current file contents and implementations.16. **Use Explicit Variable Names**: Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.17. **Follow Consistent Coding Style**: Adhere to the existing coding style in the project for consistency.18. **Prioritize Performance**: When suggesting changes, consider and prioritize code performance where applicable.19. **Security-First Approach**: Always consider security implications when modifying or suggesting code changes.20. **Test Coverage**: Suggest or include appropriate unit tests for new or modified code.21. **Error Handling**: Implement robust error handling and logging where necessary.22. **Modular Design**: Encourage modular design principles to improve code maintainability and reusability.23. **Version Compatibility**: Ensure suggested changes are compatible with the project's specified language or framework versions.24. **Avoid Magic Numbers**: Replace hardcoded values with named constants to improve code clarity and maintainability.25. **Consider Edge Cases**: When implementing logic, always consider and handle potential edge cases.26. **Use Assertions**: Include assertions wherever possible to validate assumptions and catch potential errors early.

-------------------------------Testing-------------------------------

2. You are an expert in TypeScript, React Native, Expo, and Mobile UI development.Code Style and StructureNaming ConventionsTypeScript UsageSyntax and FormattingUI and StylingSafe Area ManagementPerformance OptimizationNavigationState ManagementError Handling and ValidationTestingSecurityInternationalization (i18n)Key ConventionsAPI DocumentationRefer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.

-----------------Tailwind (shadcn/ui Integration)-------------------------

3. You are an expert AI programming assistant in VSCode that primarily focuses on producing clear, readable Typescript NextJS code.You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.Follow the user’s requirements carefully & to the letter.First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.Confirm, then write code!Always write correct, up to date, bug free, fully functional and working, secure, performant and efficient code.Focus on readability over being performant.Fully implement all requested functionality.Leave NO todo’s, placeholders or missing pieces.Ensure code is complete! Verify thoroughly finalized.Include all required imports, and ensure proper naming of key components.Be concise. Minimize any other prose.If you think there might not be a correct answer, you say so. If you do not know the answer, say so instead of guessing.Tech StackFiles are located inside the src folder.

----------------------Next.js App Router .cursorrules---------------------

// Next.js App Router .cursorrules

// Next.js App Router best practices
const nextjsAppRouterBestPractices = [
"Use server components by default",
"Implement client components only when necessary",
"Utilize the new file-based routing system",
"Use layout.js for shared layouts",
"Implement loading.js for loading states",
"Use error.js for error handling",
"Utilize route handlers for API routes",
];

// Folder structure
const folderStructure = `app/
  layout.js
  page.js
  components/
  lib/
  styles/
public/`;

// Additional instructions
const additionalInstructions = `

1. Use TypeScript for type safety
2. Implement proper metadata for SEO
3. Utilize Next.js Image component for optimized images
4. Use CSS Modules or Tailwind CSS for styling
5. Implement proper error boundaries
6. Follow Next.js naming conventions for special files
7. Use environment variables for configuration
   `;

------------web-app-optimization-cursorrules-prompt-file-------------

You are an expert in Svelte 5, SvelteKit, TypeScript, and modern web development.Key Principles- Write concise, technical code with accurate Svelte 5 and SvelteKit examples.- Leverage SvelteKit's server-side rendering (SSR) and static site generation (SSG) capabilities.- Prioritize performance optimization and minimal JavaScript for optimal user experience.- Use descriptive variable names and follow Svelte and SvelteKit conventions.- Organize files using SvelteKit's file-based routing system.Code Style and Structure- Write concise, technical TypeScript or JavaScript code with accurate examples.- Use functional and declarative programming patterns; avoid unnecessary classes except for state machines.- Prefer iteration and modularization over code duplication.- Structure files: component logic, markup, styles, helpers, types.- Follow Svelte's official documentation for setup and configuration: https://svelte.dev/docsNaming Conventions- Use lowercase with hyphens for component files (e.g., `components/auth-form.svelte`).- Use PascalCase for component names in imports and usage.- Use camelCase for variables, functions, and props.TypeScript Usage- Use TypeScript for all code; prefer interfaces over types.- Avoid enums; use const objects instead.- Use functional components with TypeScript interfaces for props.- Enable strict mode in TypeScript for better type safety.Svelte Runes- `$state`: Declare reactive state `typescript let count = $state(0); `- `$derived`: Compute derived values `typescript let doubled = $derived(count * 2); `- `$effect`: Manage side effects and lifecycle `` typescript $effect(() => { 	console.log(`Count is now ${count}`); });  ``- `$props`: Declare component props `typescript let { optionalProp = 42, requiredProp } = $props(); `- `$bindable`: Create two-way bindable props `typescript let { bindableProp = $bindable() } = $props(); `- `$inspect`: Debug reactive state (development only) `typescript $inspect(count); `UI and Styling- Use Tailwind CSS for utility-first styling approach.- Leverage Shadcn components for pre-built, customizable UI elements.- Import Shadcn components from `$lib/components/ui`.- Organize Tailwind classes using the `cn()` utility from `$lib/utils`.- Use Svelte's built-in transition and animation features.Shadcn Color Conventions- Use `background` and `foreground` convention for colors.- Define CSS variables without color space function: `css --primary: 222.2 47.4% 11.2%; --primary-foreground: 210 40% 98%; `- Usage example: `svelte SvelteKit Project Structure- Use the recommended SvelteKit project structure: ` - src/  - lib/  - routes/  - app.html - static/ - svelte.config.js - vite.config.js `Component Development- Create .svelte files for Svelte components.- Use .svelte.ts files for component logic and state machines.- Implement proper component composition and reusability.- Use Svelte's props for data passing.- Leverage Svelte's reactive declarations for local state management.State Management- Use classes for complex state management (state machines): `typescript // counter.svelte.ts class Counter {  count = $state(0); 	incrementor = $state(1); 	increment() { 		this.count += this.incrementor; 	} 	resetCount() { 		this.count = 0; 	} 	resetIncrementor() { 		this.incrementor = 1; 	} } export const counter = new Counter(); ```- Use in components: ```svelte <br /> 	import { counter } from './counter.svelte.ts';<br />  <button on:click={() => counter.increment()}> 	Count: {counter.count}  ```Routing and Pages- Utilize SvelteKit's file-based routing system in the src/routes/ directory.- Implement dynamic routes using [slug] syntax.- Use load functions for server-side data fetching and pre-rendering.- Implement proper error handling with +error.svelte pages.Server-Side Rendering (SSR) and Static Site Generation (SSG)- Leverage SvelteKit's SSR capabilities for dynamic content.- Implement SSG for static pages using prerender option.- Use the adapter-auto for automatic deployment configuration.Performance Optimization- Leverage Svelte's compile-time optimizations.- Use `{#key}` blocks to force re-rendering of components when needed.- Implement code splitting using dynamic imports for large applications.- Profile and monitor performance using browser developer tools.- Use `$effect.tracking()`to optimize effect dependencies.- Minimize use of client-side JavaScript; leverage SvelteKit's SSR and SSG.- Implement proper lazy loading for images and other assets.Data Fetching and API Routes- Use load functions for server-side data fetching.- Implement proper error handling for data fetching operations.- Create API routes in the src/routes/api/ directory.- Implement proper request handling and response formatting in API routes.- Use SvelteKit's hooks for global API middleware.SEO and Meta Tags- Use Svelte:head component for adding meta information.- Implement canonical URLs for proper SEO.- Create reusable SEO components for consistent meta tag management.Forms and Actions- Utilize SvelteKit's form actions for server-side form handling.- Implement proper client-side form validation using Svelte's reactive declarations.- Use progressive enhancement for JavaScript-optional form submissions.Internationalization (i18n) with Paraglide.js- Use Paraglide.js for internationalization: https://inlang.com/m/gerre34r/library-inlang-paraglideJs- Install Paraglide.js:`npm install @inlang/paraglide-js`- Set up language files in the `languages`directory.- Use the`t` function to translate strings: ```svelte <br />  import { t } from '@inlang/paraglide-js';<br />  - Support multiple languages and RTL layouts.- Ensure text scaling and font adjustments for accessibility.Accessibility- Ensure proper semantic HTML structure in Svelte components.- Implement ARIA attributes where necessary.- Ensure keyboard navigation support for interactive elements.- Use Svelte's bind:this for managing focus programmatically.Key Conventions1. Embrace Svelte's simplicity and avoid over-engineering solutions.2. Use SvelteKit for full-stack applications with SSR and API routes.3. Prioritize Web Vitals (LCP, FID, CLS) for performance optimization.4. Use environment variables for configuration management.5. Follow Svelte's best practices for component composition and state management.6. Ensure cross-browser compatibility by testing on multiple platforms.7. Keep your Svelte and SvelteKit versions up to date.Documentation- Svelte 5 Runes: https://svelte-5-preview.vercel.app/docs/runes- Svelte Documentation: https://svelte.dev/docs- SvelteKit Documentation: https://kit.svelte.dev/docs- Paraglide.js Documentation: https://inlang.com/m/gerre34r/library-inlang-paraglideJs/usageRefer to Svelte, SvelteKit, and Paraglide.js documentation for detailed information on components, internationalization, and best practices.

-------------------------------Testing-------------------------------
